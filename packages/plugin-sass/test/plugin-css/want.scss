////
/// Design Tokens
/// Autogenerated from tokens.json.
/// DO NOT EDIT!
////

@use "sass:list";
@use "sass:map";

$__token-values: (
  "border.std": (
    default: (var(--ds-border-std)),
    "light": (var(--ds-border-std)),
    "dark": (var(--ds-border-std)),
  ),
  "color.green": (
    default: (var(--ds-color-green)),
    "light": (var(--ds-color-green)),
    "dark": (var(--ds-color-green)),
  ),
  "gradient.g-b": (
    default: (var(--ds-gradient-g-b)),
  ),
  "typography.family.body": (
    default: (var(--ds-typography-family-body)),
  ),
  "typography.family.heading": (
    default: (var(--ds-typography-family-heading)),
  ),
  "typography.page-title": (
    "__cobalt-error": "This is a typography mixin. Use `@include typography(\"typography.page-title\")` instead.",
  ),
  "typography.subheading": (
    "__cobalt-error": "This is a typography mixin. Use `@include typography(\"typography.subheading\")` instead.",
  ),
  "typography.callout": (
    "__cobalt-error": "This is a typography mixin. Use `@include typography(\"typography.callout\")` instead.",
  ),
  "typography.body": (
    "__cobalt-error": "This is a typography mixin. Use `@include typography(\"typography.body\")` instead.",
  ),
  "shadow": (
    default: (var(--ds-shadow)),
  ),
  "transition": (
    default: (var(--ds-transition)),
  ),
);

$__token-typography-mixins: (
  "typography.page-title": (
    default: (
      "font-family": (var(--typography-page-title-font-family)),
      "font-size": (var(--typography-page-title-font-size)),
      "font-weight": (var(--typography-page-title-font-weight)),
      "letter-spacing": (var(--typography-page-title-letter-spacing)),
      "line-height": (var(--typography-page-title-line-height)),
    ),
  ),
  "typography.subheading": (
    default: (
      "font-family": (var(--typography-subheading-font-family)),
      "font-size": (var(--typography-subheading-font-size)),
      "font-weight": (var(--typography-subheading-font-weight)),
      "letter-spacing": (var(--typography-subheading-letter-spacing)),
      "line-height": (var(--typography-subheading-line-height)),
      "text-transform": (var(--typography-subheading-text-transform)),
    ),
  ),
  "typography.callout": (
    default: (
      "font-family": (var(--typography-callout-font-family)),
      "font-size": (var(--typography-callout-font-size)),
      "font-style": (var(--typography-callout-font-style)),
      "font-weight": (var(--typography-callout-font-weight)),
      "line-height": (var(--typography-callout-line-height)),
    ),
  ),
  "typography.body": (
    default: (
      "font-family": (var(--typography-body-font-family)),
      "font-size": (var(--typography-body-font-size)),
      "font-weight": (var(--typography-body-font-weight)),
      "line-height": (var(--typography-body-line-height)),
    ),
  ),
);

@function token($tokenName, $modeName: default) {
  @if map.has-key($__token-values, $tokenName) == false {
    @error "No token named \"#{$tokenName}\"";
  }
  $_token: map.get($__token-values, $tokenName);
  @if map.has-key($_token, "__cobalt-error") {
    @error map.get($_token, "__cobalt-error");
  }
  @if map.has-key($_token, $modeName) {
    @return map.get($_token, $modeName);
  } @else {
    @return map.get($_token, default);
  }
}

@function listModes($tokenName) {
  @if map.has-key($__token-values, $tokenName) == false {
    @error "No token named \"#{$tokenName}\"";
  }
  $_modes: ();
  @each $k in map.get($__token-values, $tokenName) {
    @if $k != "default" {
      $_modes: list.append($_modes, $k);
    }
  }
  @return $_modes;
}

@mixin typography($tokenName, $modeName: default) {
  @if map.has-key($__token-typography-mixins, $tokenName) == false {
    @error "No typography mixin named \"#{$tokenName}\"";
  }
  $_mixin: map.get($__token-typography-mixins, $tokenName);
  $_properties: map.get($_mixin, default);
  @if map.has-key($_mixin, $modeName) {
    $_properties: map.get($_mixin, $modeName);
  }
  @each $_property, $_value in $_properties {
    #{$_property}: #{$_value};
  }
}
