import type { Plugin } from '@terrazzo/parser';
import { isTokenMatch, makeAlias } from '@terrazzo/token-tools';
import {
  makeCSSVar,
  transformBooleanValue,
  transformBorderValue,
  transformColorValue,
  transformCubicBezierValue,
  transformDimensionValue,
  transformDurationValue,
  transformFontFamilyValue,
  transformFontWeightValue,
  transformGradientValue,
  transformLinkValue,
  transformNumberValue,
  transformShadowValue,
  transformStringValue,
  transformStrokeStyleValue,
  transformTransitionValue,
  transformTypographyValue,
} from '@terrazzo/token-tools/css';
import { generateShorthand } from '@terrazzo/token-tools/src/css/index.js';

export interface ModeSelector {
  /** The name of the mode to match */
  mode: string;
  /** (optional) Provide token IDs to match. Globs are allowed (e.g: `["color.*", "shadow.dark"]`) */
  tokens?: string[];
  /** Provide CSS selectors to generate. (e.g.: `["@media (prefers-color-scheme: dark)", "[data-color-theme='dark']"]` ) */
  selectors: string[];
}

export interface CSSPluginOptions {
  /** Where to output CSS */
  filename?: string;
  /** Glob patterns to exclude tokens from output */
  exclude?: string[];
  /** Define mode selectors as media queries or CSS classes */
  modeSelectors?: ModeSelector[];
  /** Control the final CSS variable name */
  variableName?: (name: string) => string;
}

export const FORMAT_ID = 'css';

export const FILE_PREFIX = `/* -------------------------------------------
 *  Autogenerated by ðŸ’  Terrazzo. DO NOT EDIT!
 * ------------------------------------------- */`;

export default function cssPlugin({
  filename = './index.css',
  exclude,
  variableName,
  modeSelectors,
}: CSSPluginOptions = {}): Plugin {
  const transformName = (id: string) => variableName?.(id) || makeCSSVar(id);
  const transformAlias = (id: string) => `var(${transformName(id)})`;

  return {
    name: '@terrazzo/plugin-css',
    async transform({ tokens, setTransform }) {
      for (const id in tokens) {
        if (!Object.hasOwn(tokens, id)) {
          continue;
        }
        const token = tokens[id]!;
        const localID = transformName(id);

        switch (token.$type) {
          case 'boolean': {
            for (const mode in token.mode) {
              const { $value, aliasOf } = token.mode[mode]!;
              setTransform(id, {
                format: FORMAT_ID,
                localID,
                value: transformBooleanValue($value, { aliasOf, transformAlias }),
                mode,
              });
            }
            break;
          }
          case 'border': {
            for (const mode in token.mode) {
              const { $value, aliasOf, partialAliasOf } = token.mode[mode]!;
              setTransform(id, {
                format: FORMAT_ID,
                localID,
                value: transformBorderValue($value, { aliasOf, partialAliasOf, transformAlias }),
                mode,
              });
            }
            break;
          }
          case 'color': {
            for (const mode in token.mode) {
              const { $value, aliasOf } = token.mode[mode]!;
              setTransform(id, {
                format: FORMAT_ID,
                localID,
                value: transformColorValue($value, { aliasOf, transformAlias }),
                mode,
              });
            }
            break;
          }
          case 'cubicBezier': {
            for (const mode in token.mode) {
              const { $value, aliasOf, partialAliasOf } = token.mode[mode]!;
              setTransform(id, {
                format: FORMAT_ID,
                localID,
                value: transformCubicBezierValue($value, { aliasOf, partialAliasOf, transformAlias }),
                mode,
              });
            }
            break;
          }
          case 'dimension': {
            for (const mode in token.mode) {
              const currentMode = token.mode[mode]!;
              setTransform(id, {
                format: FORMAT_ID,
                localID,
                value: transformDimensionValue(
                  currentMode.aliasOf ? makeAlias(currentMode.aliasOf) : currentMode.$value,
                  { transformAlias },
                ),
                mode,
              });
            }
            break;
          }
          case 'duration': {
            for (const mode in token.mode) {
              const { $value, aliasOf } = token.mode[mode]!;
              setTransform(id, {
                format: FORMAT_ID,
                localID,
                value: transformDurationValue($value, { aliasOf, transformAlias }),
                mode,
              });
            }
            break;
          }
          case 'fontFamily': {
            for (const mode in token.mode) {
              const { $value, aliasOf, partialAliasOf } = token.mode[mode]!;
              setTransform(id, {
                format: FORMAT_ID,
                localID,
                value: transformFontFamilyValue($value, { aliasOf, partialAliasOf, transformAlias }),
                mode,
              });
            }
            break;
          }
          case 'fontWeight': {
            for (const mode in token.mode) {
              const { $value, aliasOf } = token.mode[mode]!;
              setTransform(id, {
                format: FORMAT_ID,
                localID,
                value: transformFontWeightValue($value, { aliasOf, transformAlias }),
                mode,
              });
            }
            break;
          }
          case 'gradient': {
            for (const mode in token.mode) {
              const { $value, aliasOf, partialAliasOf } = token.mode[mode]!;
              setTransform(id, {
                format: FORMAT_ID,
                localID,
                value: transformGradientValue($value, { aliasOf, partialAliasOf, transformAlias }),
              });
            }
            break;
          }
          case 'link': {
            for (const mode in token.mode) {
              const { $value, aliasOf } = token.mode[mode]!;
              setTransform(id, {
                format: FORMAT_ID,
                localID,
                value: transformLinkValue($value, { aliasOf, transformAlias }),
                mode,
              });
            }
            break;
          }
          case 'number': {
            for (const mode in token.mode) {
              const { $value, aliasOf } = token.mode[mode]!;
              setTransform(id, {
                format: FORMAT_ID,
                localID,
                value: transformNumberValue($value, { aliasOf, transformAlias }),
                mode,
              });
            }
            break;
          }
          case 'shadow': {
            for (const mode in token.mode) {
              const { $value, aliasOf, partialAliasOf } = token.mode[mode]!;
              setTransform(id, {
                format: FORMAT_ID,
                localID,
                value: transformShadowValue($value, { aliasOf, partialAliasOf, transformAlias }),
                mode,
              });
            }
            break;
          }
          case 'string': {
            for (const mode in token.mode) {
              const { $value, aliasOf } = token.mode[mode]!;
              setTransform(id, {
                format: FORMAT_ID,
                localID,
                value: transformStringValue($value, { aliasOf, transformAlias }),
                mode,
              });
            }
            break;
          }
          case 'strokeStyle': {
            for (const mode in token.mode) {
              const { $value, aliasOf } = token.mode[mode]!;
              setTransform(id, {
                format: FORMAT_ID,
                localID,
                value: transformStrokeStyleValue($value, { aliasOf, transformAlias }),
                mode,
              });
            }
            break;
          }
          case 'transition': {
            for (const mode in token.mode) {
              const { $value, aliasOf, partialAliasOf } = token.mode[mode]!;
              setTransform(id, {
                format: FORMAT_ID,
                localID,
                value: transformTransitionValue($value, { aliasOf, partialAliasOf, transformAlias }),
                mode,
              });
            }
            break;
          }
          case 'typography': {
            for (const mode in token.mode) {
              const { $value, aliasOf, partialAliasOf } = token.mode[mode]!;
              setTransform(id, {
                format: FORMAT_ID,
                localID,
                value: transformTypographyValue($value, { aliasOf, partialAliasOf, transformAlias }),
                mode,
              });
            }
            break;
          }
        }
      }
    },
    async build({ getTransforms, outputFile }) {
      const output: string[] = [FILE_PREFIX, ''];

      // :root
      output.push(':root {');
      const rootTokens = getTransforms({ format: 'css', mode: '.' });
      for (const token of rootTokens) {
        if (isTokenMatch(token.token.id, exclude ?? [])) {
          continue;
        }
        const localID = token.localID ?? token.token.id;
        if (token.type === 'SINGLE_VALUE') {
          output.push(`  ${localID}: ${token.value};`);
        } else if (token.type === 'MULTI_VALUE') {
          const shorthand = generateShorthand({ $type: token.token.$type, localID });
          if (shorthand) {
            output.push(`  ${token.localID ?? token.token.id}: ${shorthand};`);
          }
          for (const [name, value] of Object.entries(token.value)) {
            output.push(`  ${name === '.' ? localID : [localID, name].join('-')}: ${value};`);
          }
        }
      }
      output.push('}');

      for (const { selectors, tokens, mode } of modeSelectors ?? []) {
        const selectorTokens = getTransforms({ format: 'css', select: tokens, mode });
        if (!selectorTokens.length) {
          continue;
        }

        let indent = '  ';
        for (const selector of selectors) {
          output.push('', `${selector} {`);
          if (selector.startsWith('@')) {
            output.push('  :root {');
            indent = '    ';
          }
          for (const token of selectorTokens) {
            if (token.token.aliasOf) {
              continue;
            }
            const localID = token.localID ?? token.token.id;
            if (token.type === 'SINGLE_VALUE') {
              output.push(`${indent}${localID}: ${token.value};`);
            } else {
              const shorthand = generateShorthand({ $type: token.token.$type, localID });
              if (shorthand) {
                output.push(`${indent}${localID}: ${shorthand};`);
              }
              for (const [name, subvalue] of Object.entries(token.value)) {
                output.push(`${indent}${localID}-${name}: ${subvalue};`);
              }
            }
          }
          if (selector.startsWith('@')) {
            output.push('  }');
          }
          output.push('}');
        }
      }

      outputFile(filename, output.join('\n'));
    },
  };
}
